# -*- coding: utf-8 -*-
"""Scrapping IMDb web site.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f_qWPz9jpk_T45GXY-ZnNVP7FR1e9zil
"""

import pandas as pd
from bs4 import BeautifulSoup
import requests

url = 'https://www.imdb.com/chart/top/'

h = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1',
    'Cache-Control': 'max-age=0',
    'TE': 'Trailers'
}

def getName(movies):
  names = []
  for movie in movies:
    name = movie.find('h3', class_='ipc-title__text').text
    names.append(name)
  return names


def getLink(movies):
  links = []
  for movie in movies:
    link = movie.find('a', class_='ipc-title-link-wrapper')
    links.append(link.get('href'))
  return links


def getRatings(movies):
  ratings = []
  for movie in movies:
    rating = movie.find('span', class_='ipc-rating-star--rating').text
    ratings.append(rating)
  return ratings


def getDuration(movies):
  durations = []
  for movie in movies:
    dur = movie.find_all('span', class_='sc-300a8231-7 eaXxft cli-title-metadata-item')[1].text
    durations.append(dur)
  return durations


def getVoteCount(movies):
  counts = []
  for movie in movies:
    count = movie.find('span', class_='ipc-rating-star--voteCount').text
    counts.append(count)
  return counts


def getYear(movies):
  years = []
  for movie in movies:
    year = movie.find('span', class_='sc-300a8231-7 eaXxft cli-title-metadata-item').text
    years.append(year)
  return years


try:
  source = requests.get(url, headers=h)
  source.raise_for_status()
  soup = BeautifulSoup(source.text, 'html.parser')
  # print(soup.prettify)

  d={
      'Name': [],
      'Link': [],
      'Ratings': [],
      'Duration': [],
      'Year': [],
      'Vote Count': []
  }

  movies = soup.find('ul', class_='ipc-metadata-list ipc-metadata-list--dividers-between sc-a1e81754-0 iyTDQy compact-list-view ipc-metadata-list--base').find_all('li')
  d['Name'] = getName(movies)
  d['Link'] = getLink(movies)
  d['Year'] = getYear(movies)
  d['Ratings'] = getRatings(movies)
  d['Duration'] = getDuration(movies)
  d['Vote Count'] = getVoteCount(movies)

  df = pd.DataFrame(d)
  df.to_csv('Movie Data Analysis.csv')
except Exception as e:
  print(e)

